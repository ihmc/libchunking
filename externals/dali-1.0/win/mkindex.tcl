#
# Source this file to create the Dali pkgIndex.tcl file
#

# ldelete   -
#   search a list for an item and delete the first one found;
#   returns new list;
#
#   example: ldelete {a b c a} a ==> b c a
#

proc ldelete {list elt} {
  set index [lsearch $list $elt];
  if {$index >= 0} {
    return [lreplace $list $index $index];
  }
  return $list;
}

append index "# Tcl package index file, version 1.0\n"
append index "# This file is generated by sourcing the \"mkindex.tcl\" file\n"
append index "# and sourced either when an application starts up or\n"
append index "# by a \"package unknown\" script.  It invokes the\n"
append index "# \"package ifneeded\" command to set up package-related\n"
append index "# information so that packages will be loaded automatically\n"
append index "# in response to \"package require\" commands.  When this\n"
append index "# script is sourced, the variable \$dir must contain the\n"
append index "# full path name of this file's directory.\n"

# We have to explicitly list the DLLs because the Basic package
# has to be first in the list
set files {tclDvmBasic.dll tclDvmAmap.dll tclDvmAvi.dll
    tclDvmByteGeom.dll tclDvmColor.dll tclDvmDisplay.dll
    tclDvmGif.dll tclDvmImap.dll tclDvmJpeg.dll tclDvmKernel.dll
    tclDvmMpeg.dll tclDvmPnm.dll tclDvmVision.dll tclDvmWave.dll}

foreach f $files {
    set oldPackages [package names]
    load $f
    set pkg [package names]
    foreach p $oldPackages {
        set pkg [ldelete $pkg $p]
    }
    set pkgVer [package provide $pkg]

    append index "\npackage ifneeded $pkg $pkgVer \[list load \$dir/$f\]"
}

set f [open pkgIndex.tcl w]
puts $f $index
close $f

